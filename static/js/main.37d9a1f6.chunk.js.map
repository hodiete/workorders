{"version":3,"sources":["config/WorkerAPI.js","components/Profile.js","components/Workers.js","App.js","serviceWorker.js","index.js"],"names":["a","axios","get","API","workOrders","WorkOrders","order","workOrder","name","email","image","companyName","orderName","description","deadline","className","src","alt","Date","toString","Worker","Fragment","map","i","Profile","key","WorkerOrdersApp","state","orders","workers","query","checked","loading","handleOrders","setState","handleWorkers","worker","prevState","getAllWorkersOrder","filter","id","workerId","handleInputChange","e","target","value","handleCheckboxChange","sortOrders","sort","b","filterWorkersByName","toLowerCase","includes","getWorkOrders","then","data","workerIDs","uniqueWorkerIDs","Set","workerInfos","workId","Promise","all","getWorkers","console","log","this","filteredWorkers","type","onChange","placeholder","onClick","htmlFor","length","Workers","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.37d9a1f6.chunk.js","sourcesContent":["import axios from \"axios\";\nimport API from \"./config\";\n\nasync function getWorkOrders() {\n return await axios.get(API.workOrders);\n}\n\nfunction getWorkers(orders) {\n const workerIDs = orders.map((order) => order.workerId);\n const uniqueWorkerIDs = new Set(workerIDs);\n const workerInfos = [...uniqueWorkerIDs].map(\n  async (workerId) => await axios.get(`${API.workId}/${workerId}`)\n );\n return Promise.all(workerInfos);\n}\n\nexport { getWorkOrders, getWorkers };\n","import React from \"react\";\n\nfunction WorkOrders({ order, workOrder }) {\n const { name, email, image, companyName } = workOrder;\n const { name: orderName, description, deadline } = order;\n return (\n  <div className=\"card\">\n   <div className=\"workorder\">\n    <h2 className=\"workorder__name\"> {orderName}</h2>\n\n    <div className=\"workorder__description\"> {description}</div>\n   </div>\n   <div className=\"workprofile\">\n    <img className=\"profile__image\" src={image} alt=\"\" />\n    <div className=\"profile__information\">\n     <div className=\"profile__name\"> {name}</div>\n     <div className=\"profile__email\"> {email}</div>\n\n     <div className=\"profile__companyName\">{companyName}</div>\n    </div>\n   </div>\n\n   <div className=\"workorder__dates\">{new Date(deadline).toString()}</div>\n  </div>\n );\n}\n\nexport default WorkOrders;\n","import React from \"react\";\nimport Profile from \"./Profile\";\n\nfunction Worker({ order, workOrders }) {\n return (\n  <React.Fragment>\n   {workOrders.map((workOrder, i) => (\n    <Profile key={i} workOrder={workOrder} order={order} />\n   ))}\n  </React.Fragment>\n );\n}\n\nexport default Worker;\n","import React from \"react\";\nimport \"./App.css\";\nimport { getWorkOrders, getWorkers } from \"./config/WorkerAPI\";\nimport Workers from \"./components/Workers\";\nclass WorkerOrdersApp extends React.Component {\n state = {\n  orders: [],\n  workers: [],\n  query: \"\",\n  checked: false,\n  loading: true,\n };\n\n handleOrders = (orders) => {\n  this.setState({\n   orders,\n  });\n  return orders;\n };\n handleWorkers = (worker) => {\n  this.setState((prevState) => ({\n   workers: [...prevState.workers, worker],\n   loading: false,\n  }));\n  return worker;\n };\n\n getAllWorkersOrder = (order, workers) =>\n  workers.filter((worker) => worker.id === order.workerId);\n\n handleInputChange = (e) => {\n  this.setState({\n   query: e.target.value,\n  });\n };\n\n handleCheckboxChange = (e) => {\n  this.setState({\n   checked: e.target.checked,\n  });\n };\n sortOrders = (orders) =>\n  this.state.checked\n   ? orders.sort((a, b) => b.deadline - a.deadline)\n   : orders.sort((a, b) => a.deadline - b.deadline);\n\n filterWorkersByName = (workers, query) =>\n  query === \"\"\n   ? workers\n   : workers.filter((worker) => worker.name.toLowerCase().includes(query));\n\n componentDidMount() {\n  try {\n   getWorkOrders()\n    .then(({ data }) => this.handleOrders(data.orders))\n    .then((orders) => getWorkers(orders))\n    .then((workers) =>\n     workers.map(({ data }) => this.handleWorkers(data.worker))\n    );\n  } catch (e) {\n   console.log(e);\n  }\n }\n\n render() {\n  const { orders, workers, query, loading } = this.state;\n  const filteredWorkers = this.filterWorkersByName(workers, query);\n  return (\n   <React.Fragment>\n    {!loading && (\n     <div className=\"container\">\n      <input\n       className=\"input__search\"\n       type=\"search\"\n       onChange={this.handleInputChange}\n       value={query}\n       placeholder=\"Filter by worker name...\"\n      />\n\n      <div className=\"input__checkbox toggle-switch\">\n       <span>Latest Order</span>\n       <input\n        type=\"checkbox\"\n        id=\"chkTest\"\n        name=\"chkTest\"\n        onClick={this.handleCheckboxChange}\n       />\n       <label htmlFor=\"chkTest\">\n        <span className=\"toggle-track\"></span>\n       </label>\n       <span>Earliest Order</span>\n      </div>\n      <div className=\"workorder__container\">\n       {filteredWorkers.length > 0 ? (\n        this.sortOrders(orders).map((order, i) => {\n         const workOrders = this.getAllWorkersOrder(order, filteredWorkers);\n         return <Workers key={i} workOrders={workOrders} order={order} />;\n        })\n       ) : (\n        <div className=\"no-results\">No Work Orders Found</div>\n       )}\n      </div>\n     </div>\n    )}\n   </React.Fragment>\n  );\n }\n}\n\nexport default WorkerOrdersApp;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}